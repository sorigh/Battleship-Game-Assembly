.386
.model flat, stdcall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;includem biblioteci, si declaram ce functii vrem sa importam
includelib msvcrt.lib
extern exit: proc
extern malloc: proc
extern memset: proc

includelib canvas.lib
extern BeginDrawing: proc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;declaram simbolul start ca public - de acolo incepe executia
public start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;sectiunile programului, date, respectiv cod
.data
;aici declaram date
window_title DB "Battleship",0
area_width EQU 700
area_height EQU 700
area DD 0

col EQU 10
lin EQU 10
board_size equ 500 
board_x equ 100
board_y equ 100

ship2 EQU 2
ship3 EQU 3
ship4 EQU 4
ship5 EQU 5

counter DD 0 ; numara evenimentele de tip timer

arg1 EQU 8
arg2 EQU 12
arg3 EQU 16
arg4 EQU 20

symbol_width EQU 10
symbol_height EQU 20


image_width EQU 50
image_height EQU 50
include water.inc
include digits.inc
include letters.inc

button_x EQU 500
button_y EQU 150
button_size EQU 50

m1 db 0,0,0,0,0,0,0,0,0,0
   db 0,1,0,0,0,0,0,0,0,0
   db 0,1,0,0,0,0,0,0,1,0
   db 0,1,0,0,0,0,0,0,1,0
   db 0,1,0,0,0,0,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0
   db 0,0,0,1,1,1,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0
   db 0,0,1,1,1,1,1,0,0,0
   db 0,0,0,0,0,0,0,0,0,0 
.code

place_ship macro ship
	mov ecx, ship ;iterator, lungime vapor
	mov ebx, 0
	mov esi, 0
	plasare_loop:
		;rand directie
	call rand
	and eax, 2
	; 0-> nord
	; 1-> est
	; 2-> sud
	
	cmp eax, 0 ; nord
	jz v_nord
	
	cmp eax, 1 ; est
	jz v_est
	
	cmp eax, 2 ; sud
	jz v_sud
	
	jnz v_vest
	
	v_nord:
	
	v_est:
	
	v_sud:
	
	v_vest:
	
	
	exit_loop:
		cmp esi, ecx
		jne plasare_loop
	
endm
; procedura make_text afiseaza o litera sau o cifra la coordonatele date
; arg1 - simbolul de afisat (litera sau cifra)
; arg2 - pointer la vectorul de pixeli
; arg3 - pos_x
; arg4 - pos_y

make_text proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0FFFFFFh
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text endp

; un macro ca sa apelam mai usor desenarea simbolului
make_text_macro macro symbol, drawArea, x, y
	push y
	push x
	push drawArea
	push symbol
	call make_text
	add esp, 16
endm


draw_linie_orizontal macro x, y, len, color
	local bucla_linie
	mov eax, y 
	mov ebx, area_width
	mul ebx 
	add eax, x
	shl eax, 2
	add eax, area
	
	mov ecx, len
	bucla_linie:
	mov dword ptr[eax], color
	add eax, 4
	loop bucla_linie
endm

draw_linie_vertical macro x, y, len, color
	local bucla_linie
	mov eax, y 
	mov ebx, area_width
	mul ebx 
	add eax, x
	shl eax, 2
	add eax, area
	mov ecx, len
	bucla_linie:
	mov dword ptr[eax], color
	add eax, area_width*4
	loop bucla_linie
endm


make_image proc
	push ebp
	mov ebp, esp
	pusha

	lea esi, var_0
	
draw_image:
	mov ecx, image_height
loop_draw_lines:
	mov edi, [ebp+arg1] ; pointer to pixel area
	mov eax, [ebp+arg3] ; pointer to coordinate y
	
	add eax, image_height 
	sub eax, ecx ; current line to draw (total - ecx)
	
	mov ebx, area_width
	mul ebx	; get to current line
	
	add eax, [ebp+arg2] ; get to coordinate x in current line
	shl eax, 2 ; multiply by 4 (DWORD per pixel)
	add edi, eax
	
	push ecx
	mov ecx, image_width ; store drawing width for drawing loop
	
loop_draw_columns:

	push eax
	mov eax, dword ptr[esi] 
	mov dword ptr [edi], eax ; take data from variable to canvas
	pop eax
	
	add esi, 4
	add edi, 4 ; next dword (4 Bytes)
	
	loop loop_draw_columns
	
	pop ecx
	loop loop_draw_lines
	popa
	
	mov esp, ebp
	pop ebp
	ret
make_image endp

; simple macro to call the procedure easier
make_image_macro macro drawArea, x, y
	push y
	push x
	push drawArea
	call make_image
	add esp, 12
endm

; functia de desenare - se apeleaza la fiecare click
; sau la fiecare interval de 200ms in care nu s-a dat click
; arg1 - evt (0 - initializare, 1 - click, 2 - s-a scurs intervalul fara click)
; arg2 - x
; arg3 - y
draw proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1]
	cmp eax, 1
	jz evt_click
	cmp eax, 2
	jz evt_timer ; nu s-a efectuat click pe nimic
	;mai jos e codul care intializeaza fereastra cu pixeli albi
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	push 255
	push area
	call memset
	add esp, 12
	
	
	popa
	mov esp, ebp
	pop ebp
	ret
	jmp afisare_litere
	
evt_click:
	;mov eax, [ebp+arg3]
	;mov ebx, area_width
	;mul ebx
	;add eax, [ebp+arg2]
	;shl eax, 2
	;add eax, area
	;mov dword ptr[eax], 0FF0000h
	;mov dword ptr[eax+4], 0FF0000h
	;mov dword ptr[eax-4], 0FF0000h
	;mov dword ptr[eax+4*area_width], 0FF0000h
	;mov dword ptr[eax-4*area_width], 0FF0000h
	;cruce
	
	mov eax, [ebp+arg2]
	cmp eax, board_x
	jl board_fail
	
	cmp eax, board_x+board_size
	jg board_fail
	
	mov eax, [ebp+arg3]
	cmp eax, board_y
	jl board_fail
	
	cmp eax, board_y+board_size
	jg board_fail
	 ;inseamna ca suntem inauntru la board
	make_text_macro '1', area, 600,600
	make_image_macro area, [ebp+arg2], [ebp+arg3]
	board_fail:
	
evt_timer:
	inc counter

	
afisare_litere:
	;afisam valoarea counter-ului curent (sute, zeci si unitati)
	mov ebx, 10
	mov eax, counter
	;cifra unitatilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 30, 10
	;cifra zecilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 20, 10
	;cifra sutelor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 10, 10
	
	;scriem un mesaj
	;.....
	;afisare buton
	;draw_linie_orizontal button_x, button_y, button_size, 0
	;draw_linie_orizontal button_x, button_y+button_size, button_size, 0
	;draw_linie_vertical button_x, button_y, button_size, 0
	;draw_linie_vertical button_x+button_size, button_y, button_size, 0
	
	;afisare grid
	draw_linie_orizontal board_x, board_y, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*2, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*3, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*4, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*5, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*6, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*7, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*8, board_size, 0
	draw_linie_orizontal board_x, board_y+button_size*9, board_size, 0
	draw_linie_orizontal board_x, board_y+board_size, board_size, 0
	
	draw_linie_vertical board_x, board_y, board_size, 0
	draw_linie_vertical board_x+button_size, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*2, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*3, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*4, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*5, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*6, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*7, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*8, board_y, board_size, 0
	draw_linie_vertical board_x+button_size*9, board_y, board_size, 0
	draw_linie_vertical board_x+board_size, board_y, board_size, 0
	
	make_text_macro 'A', area, 120 , 70
	make_text_macro 'B', area, 120+button_size , 70
	make_text_macro 'C', area, 120+button_size*2 , 70
	make_text_macro 'D', area, 120+button_size*3 , 70
	make_text_macro 'E', area, 120+button_size*4 , 70
	make_text_macro 'F', area, 120+button_size*5 , 70
	make_text_macro 'G', area, 120+button_size*6 , 70
	make_text_macro 'H', area, 120+button_size*7 , 70
	make_text_macro 'I', area, 120+button_size*8 , 70
	make_text_macro 'J', area, 120+button_size*9 , 70
	
	make_text_macro '1', area, 70, 115
	make_text_macro '2', area, 70, 115+button_size
	make_text_macro '3', area, 70, 115+button_size*2
	make_text_macro '4', area, 70, 115+button_size*3
	make_text_macro '5', area, 70, 115+button_size*4
	make_text_macro '6', area, 70, 115+button_size*5
	make_text_macro '7', area, 70, 115+button_size*6
	make_text_macro '8', area, 70, 115+button_size*7
	make_text_macro '9', area, 70, 115+button_size*8
	make_text_macro '1', area, 60, 115+button_size*9
	make_text_macro '0', area, 70, 115+button_size*9
	
	
	
	
	
final_draw:
	popa
	mov esp, ebp
	pop ebp
	ret
draw endp

start:
	;alocam memorie pentru zona de desenat
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	call malloc
	add esp, 4
	mov area, eax
	;apelam functia de desenare a ferestrei
	; typedef void (*DrawFunc)(int evt, int x, int y);
	; void __cdecl BeginDrawing(const char *title, int width, int height, unsigned int *area, DrawFunc draw);
	push offset draw
	push area
	push area_height
	push area_width
	push offset window_title
	call BeginDrawing
	add esp, 20
	;terminarea programului
	push 0
	call exit
end start
